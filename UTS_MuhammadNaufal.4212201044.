import numpy as np
import pandas as pd
from sklearn import svm
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, f1_score
from sklearn.model_selection import LeaveOneOut
from skimage.feature import hog
from tqdm import tqdm
import seaborn as sns
import matplotlib.pyplot as plt

def load_data(file_path):
    # Membaca data
    data = pd.read_csv(file_path, header=None)
    labels = data.iloc[:, 0].values  # Kolom pertama sebagai label
    images = data.iloc[:, 1:].values  # Sisanya sebagai pixel data
    
    # Reshape data ke (28, 28)
    images = images.reshape(-1, 28, 28)
    return images, labels

def extract_hog_features(images):
    hog_features = []
    for img in images:
        feature = hog(img, 
                      orientations=9, 
                      pixels_per_cell=(8, 8), 
                      cells_per_block=(2, 2), 
                      block_norm='L2-Hys')
        hog_features.append(feature)
    return np.array(hog_features)

def train_and_evaluate_svm(X, y):
    # Inisialisasi model SVM
    model = svm.SVC(kernel='linear', C=1.0)
    
    # Evaluasi dengan Leave-One-Out Cross-Validation
    loo = LeaveOneOut()
    y_true, y_pred = [], []
    
    for train_index, test_index in tqdm(loo.split(X), total=len(X)):
        X_train, X_test = X[train_index], X[test_index]
        y_train, y_test = y[train_index], y[test_index]
        
        # Training SVM
        model.fit(X_train, y_train)
        
        # Prediksi
        prediction = model.predict(X_test)
        
        # Menyimpan hasil
        y_true.append(y_test[0])
        y_pred.append(prediction[0])
    
    return y_true, y_pred

def plot_confusion_matrix(y_true, y_pred, classes):
    conf_matrix = confusion_matrix(y_true, y_pred)
    plt.figure(figsize=(10, 7))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', 
                xticklabels=classes, yticklabels=classes)
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.title('Confusion Matrix')
    plt.show()

def evaluate(y_true, y_pred, classes):
    # Confusion Matrix
    plot_confusion_matrix(y_true, y_pred, classes)
    
    # Metrik Evaluasi
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, average='macro')
    f1 = f1_score(y_true, y_pred, average='macro')
    
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"F1 Score: {f1:.4f}")

# Main
input_file = r'C:\Users\User\a2-correlation-and-convolution-naufal4212201044\data_compressed.csv'
images, labels = load_data(input_file)

# Ekstraksi fitur HOG
X = extract_hog_features(images)
y = labels

# Training dan Evaluasi
y_true, y_pred = train_and_evaluate_svm(X, y)

# Menampilkan hasil evaluasi
unique_classes = np.unique(labels)  # Mengambil daftar kelas unik dari label
evaluate(y_true, y_pred, unique_classes)
